# Thanks to Job Vranish (https://spin.atomicobject.com/2016/08/26/makefile-c-projects/)
TARGET_EXEC := COARA


CXX := g++

SRC_DIRS := src
# HEADER_DIRS := header

BUILD_DIR := build
BUILD_PATH := $(shell pwd)/$(BUILD_DIR)

INC_FLAGS := -I./external/imgui -I./external/imgui/backends
# LIB_FLAGS := -L/opt/homebrew/lib -lSDL2 -lSDL2_image -lSDL2_ttf -lz -lzstd


# SDL2_INC_FLAGS := -I./$(HEADER_DIRS) -I/opt/homebrew/include/SDL2 -D_THREAD_SAFE
# SDL2_LIB_FLAGS := -L/opt/homebrew/lib -lSDL2 -lSDL2_image -lSDL2_ttf -lz -lzstd



# SETTING ENVIRONMENT PATH FOR COMPILING
# export PATH := $(shell pwd)/header:$(PATH)




# Find all the C and C++ files we want to compile
# Note the single quotes around the * expressions. Make will incorrectly expand these otherwise.
SRCS := $(shell find $(SRC_DIRS) -name '*.cpp' -or -name '*.c' -or -name '*.s')


# String substitution for every C/C++ file.
# As an example, hello.cpp turns into ./build/hello.cpp.o
OBJS := $(SRCS:%=$(BUILD_DIR)/%.o)

# String substitution (suffix version without %).
# As an example, ./build/hello.cpp.o turns into ./build/hello.cpp.d
#DEPS := $(OBJS:.o=.d)



# Every folder in ./src will need to be passed to GCC so that it can find header files
# INC_DIRS := $(shell find $(SRC_DIRS) -type d)

# Add a prefix to INC_DIRS. So moduleA would become -ImoduleA. GCC understands this -I flag
#INC_FLAGS := $(addprefix -I,$(INC_DIRS))

#LDFLAGS := -L/opt/homebrew/lib -lSDL2



# The -MMD and -MP flags together generate Makefiles for us!
# These files will have .d instead of .o as the output.
#CPPFLAGS := $(INC_FLAGS) -MMD -MP





# The final build step.
$(BUILD_DIR)/$(TARGET_EXEC): $(OBJS)
	#$(CXX) -std=c++17 $(OBJS) -o $@ $(SDL2_LIB_FLAGS)
	$(CXX) -std=c++17 $(OBJS) -o $@ 



	# COPY REQUIRED CONTENTS TO BUILD FOLDER
	#$(shell cp -R ./\[NEED_TO_DISTRIBUTE]/* ./build )




# Build step for C source
# $(BUILD_DIR)/%.c.o: %.c
# 	mkdir -p $(dir $@)
# 	$(CC) $(CPPFLAGS) $(CFLAGS) -c $< -o $@



# Build step for C++ source
$(BUILD_DIR)/%.cpp.o: %.cpp
	mkdir -p $(dir $@)
	$(CXX) -std=c++17 $(INC_FLAGS) -c $< -o $@
	#$(CXX) -std=c++17 $(SDL2_INC_FLAGS) -c $< -o $@



.PHONY: run
run:
	cd $(BUILD_PATH) ; \
	$(BUILD_PATH)/$(TARGET_EXEC)
	


.PHONY: clean
clean:
	rm -r $(BUILD_DIR)



# Include the .d makefiles. The - at the front suppresses the errors of missing
# Makefiles. Initially, all the .d files will be missing, and we don't want those
# errors to show up.
#-include $(DEPS)